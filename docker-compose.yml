services:
  nginx:
    build:
      context: ./client
      dockerfile: Dockerfile
    networks:
      nginx_net:
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - server
    restart: unless-stopped
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #   restart: unless-stopped
  #   entrypoint:  "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #   networks:
  #     nginx_net:
  server:
    build:
      context: ./server
      dockerfile: ./Dockerfile
      target: ${MODE}
    env_file:
      - ./server/.env.${MODE}
    # volumes: # Для разработки
    #   - ./server:/app # Для разработки
    #   - /app/node_modules # Для разработки
    ports:
      - 5000:5000
    # command: yarn run start:dev # Для разработки
    depends_on:
      - postgres
    networks:
      nginx_net:
    restart: always
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: prod_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - ./server/.env.${MODE}
    ports:
      - '5020:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker_postgres_init.sql:/docker-entrypoint initdb.d/docker_postgres_init.sql
    restart: always
    networks:
      nginx_net:

volumes:
  pgdata:

networks:
  nginx_net:
    name: nginx_net